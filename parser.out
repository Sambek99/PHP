Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ADDITION_ASSIGNMENT
    AND
    ARRAY
    AS
    BOOL
    BOOLEAN
    CALLABLE
    CATCH
    CLASS
    CLONE
    CONCAT
    CONST
    DECLARE
    DECREMENT
    DIE
    DIVISION_ASSIGNMENT
    DOLAR
    ELSEIF
    EMPTY
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    EQ
    EXIT
    EXTENDS
    FALSE
    FALSO
    FINAL
    FINALLY
    FOREACH
    GE
    GLOBAL
    GOTO
    GT
    IDENTICAL
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INCREMENT
    INSTANCEOF
    INT
    INTERFACE
    ISSET
    LE
    LIST
    LT
    MOD_ASSIGNMENT
    MULTIPLE_COMMENT
    MULTIPLICATION_ASSIGNMENT
    NAMESPACE
    NEQ
    NEW
    NOT
    NOT_IDENTICAL
    NULL
    OBJECT
    OR
    PRINT
    PRIVATE
    PROTECTED
    PUBLIC
    QUESTION
    REQUIRE
    REQUIRE_ONCE
    SIMPLE_COMMENT
    STATIC
    SUBTRACTION_ASSIGNMENT
    THROW
    TRAIT
    TRUE
    TRY
    TUPLE
    UNSET
    USE
    VAR
    VERDADERO
    VOID
    YIELD

Grammar

Rule 0     S' -> parametros
Rule 1     parametros -> VARIABLE
Rule 2     parametros -> VARIABLE COMA parametros
Rule 3     cases -> CASE expresion COLON programa
Rule 4     cases -> CASE expresion COLON programa cases
Rule 5     pares -> STRING COLON expresion
Rule 6     pares -> STRING COLON expresion COMA pares
Rule 7     llamada_funcion -> VARIABLE LPAREN parametros RPAREN
Rule 8     statement -> asignacion
Rule 9     statement -> impresion
Rule 10    statement -> solicitud_datos
Rule 11    statement -> expresion_aritmetica
Rule 12    statement -> declaracion_estructura
Rule 13    statement -> condicion
Rule 14    programa -> statement programa
Rule 15    programa -> statement
Rule 16    impresion -> ECHO expresiones PUNTOYCOMA
Rule 17    impresion -> ECHO PUNTOYCOMA
Rule 18    expresiones -> expresion
Rule 19    expresiones -> expresion COMA expresiones
Rule 20    solicitud_datos -> VARIABLE SIMPLE_ASSIGNMENT INPUT LPAREN STRING RPAREN PUNTOYCOMA
Rule 21    expresion_aritmetica -> expresion_aritmetica operador term
Rule 22    expresion_aritmetica -> term
Rule 23    term -> term operador factor
Rule 24    term -> factor
Rule 25    factor -> LPAREN expresion_aritmetica RPAREN
Rule 26    factor -> INTEGER
Rule 27    factor -> FLOAT
Rule 28    factor -> VARIABLE
Rule 29    operador -> PLUS
Rule 30    operador -> MINUS
Rule 31    operador -> TIMES
Rule 32    operador -> DIVIDE
Rule 33    operador -> MOD
Rule 34    condicion -> IF LPAREN expresion RPAREN LBRACE programa RBRACE
Rule 35    condicion -> IF LPAREN expresion RPAREN LBRACE programa RBRACE ELSE LBRACE programa RBRACE
Rule 36    asignacion -> VARIABLE SIMPLE_ASSIGNMENT expresion PUNTOYCOMA
Rule 37    declaracion_estructura -> VARIABLE SIMPLE_ASSIGNMENT LCOR lista_elementos RCOR PUNTOYCOMA
Rule 38    declaracion_estructura -> VARIABLE SIMPLE_ASSIGNMENT LCOR RCOR PUNTOYCOMA
Rule 39    lista_elementos -> expresion
Rule 40    lista_elementos -> expresion COMA lista_elementos
Rule 41    declarar_cola -> VARIABLE SIMPLE_ASSIGNMENT QUEUE LPAREN RPAREN
Rule 42    declarar_pila -> VARIABLE SIMPLE_ASSIGNMENT STACK LPAREN RPAREN
Rule 43    declarar_mapa -> VARIABLE SIMPLE_ASSIGNMENT MAP LPAREN RPAREN
Rule 44    declarar_grafo -> VARIABLE SIMPLE_ASSIGNMENT GRAPH LPAREN RPAREN
Rule 45    declarar_conjunto -> VARIABLE SIMPLE_ASSIGNMENT SET LPAREN RPAREN
Rule 46    declarar_diccionario_valores -> VARIABLE SIMPLE_ASSIGNMENT LBRACE pares RBRACE
Rule 47    switch_case -> SWITCH LPAREN expresion RPAREN LBRACE cases DEFAULT COLON programa RBRACE
Rule 48    switch_case -> SWITCH LPAREN expresion RPAREN LBRACE cases RBRACE
Rule 49    break -> BREAK PUNTOYCOMA
Rule 50    for_each -> FOR LPAREN VARIABLE IN VARIABLE RPAREN LBRACE programa RBRACE
Rule 51    do_while -> DO LBRACE programa RBRACE WHILE LPAREN expresion RPAREN PUNTOYCOMA
Rule 52    switch_case_default -> SWITCH LPAREN expresion RPAREN LBRACE cases DEFAULT COLON programa RBRACE
Rule 53    continue -> CONTINUE PUNTOYCOMA
Rule 54    funcion_parametros_opcionales -> FUNCTION VARIABLE LPAREN parametros RPAREN LBRACE programa RBRACE
Rule 55    funcion_parametros_opcionales -> FUNCTION VARIABLE LPAREN RPAREN LBRACE programa RBRACE
Rule 56    funcion_lambda -> VARIABLE SIMPLE_ASSIGNMENT LAMBDA LPAREN parametros RPAREN COLON expresion
Rule 57    funcion_recursiva -> FUNCTION VARIABLE LPAREN parametros RPAREN LBRACE llamada_funcion RBRACE
Rule 58    funcion_con_retorno -> FUNCTION VARIABLE LPAREN parametros RPAREN LBRACE RETURN expresion PUNTOYCOMA RBRACE
Rule 59    funcion_multiples_retornos -> FUNCTION VARIABLE LPAREN parametros RPAREN LBRACE RETURN LCOR expresiones RCOR PUNTOYCOMA RBRACE
Rule 60    funcion_sobrecarga -> FUNCTION VARIABLE LPAREN parametros RPAREN LBRACE programa RBRACE
Rule 61    funcion_sobrecarga -> FUNCTION VARIABLE LPAREN RPAREN LBRACE programa RBRACE
Rule 62    expresion -> STRING
Rule 63    expresion -> INTEGER
Rule 64    expresion -> FLOAT
Rule 65    expresion -> VARIABLE
Rule 66    empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
ADDITION_ASSIGNMENT  : 
AND                  : 
ARRAY                : 
AS                   : 
BOOL                 : 
BOOLEAN              : 
BREAK                : 49
CALLABLE             : 
CASE                 : 3 4
CATCH                : 
CLASS                : 
CLONE                : 
COLON                : 3 4 5 6 47 52 56
COMA                 : 2 6 19 40
CONCAT               : 
CONST                : 
CONTINUE             : 53
DECLARE              : 
DECREMENT            : 
DEFAULT              : 47 52
DIE                  : 
DIVIDE               : 32
DIVISION_ASSIGNMENT  : 
DO                   : 51
DOLAR                : 
ECHO                 : 16 17
ELSE                 : 35
ELSEIF               : 
EMPTY                : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQ                   : 
EXIT                 : 
EXTENDS              : 
FALSE                : 
FALSO                : 
FINAL                : 
FINALLY              : 
FLOAT                : 27 64
FOR                  : 50
FOREACH              : 
FUNCTION             : 54 55 57 58 59 60 61
GE                   : 
GLOBAL               : 
GOTO                 : 
GRAPH                : 44
GT                   : 
IDENTICAL            : 
IF                   : 34 35
IMPLEMENTS           : 
IN                   : 50
INCLUDE              : 
INCLUDE_ONCE         : 
INCREMENT            : 
INPUT                : 20
INSTANCEOF           : 
INT                  : 
INTEGER              : 26 63
INTERFACE            : 
ISSET                : 
LAMBDA               : 56
LBRACE               : 34 35 35 46 47 48 50 51 52 54 55 57 58 59 60 61
LCOR                 : 37 38 59
LE                   : 
LIST                 : 
LPAREN               : 7 20 25 34 35 41 42 43 44 45 47 48 50 51 52 54 55 56 57 58 59 60 61
LT                   : 
MAP                  : 43
MINUS                : 30
MOD                  : 33
MOD_ASSIGNMENT       : 
MULTIPLE_COMMENT     : 
MULTIPLICATION_ASSIGNMENT : 
NAMESPACE            : 
NEQ                  : 
NEW                  : 
NOT                  : 
NOT_IDENTICAL        : 
NULL                 : 
OBJECT               : 
OR                   : 
PLUS                 : 29
PRINT                : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTOYCOMA           : 16 17 20 36 37 38 49 51 53 58 59
QUESTION             : 
QUEUE                : 41
RBRACE               : 34 35 35 46 47 48 50 51 52 54 55 57 58 59 60 61
RCOR                 : 37 38 59
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 58 59
RPAREN               : 7 20 25 34 35 41 42 43 44 45 47 48 50 51 52 54 55 56 57 58 59 60 61
SET                  : 45
SIMPLE_ASSIGNMENT    : 20 36 37 38 41 42 43 44 45 46 56
SIMPLE_COMMENT       : 
STACK                : 42
STATIC               : 
STRING               : 5 6 20 62
SUBTRACTION_ASSIGNMENT : 
SWITCH               : 47 48 52
THROW                : 
TIMES                : 31
TRAIT                : 
TRUE                 : 
TRY                  : 
TUPLE                : 
UNSET                : 
USE                  : 
VAR                  : 
VARIABLE             : 1 2 7 20 28 36 37 38 41 42 43 44 45 46 50 50 54 55 56 57 58 59 60 61 65
VERDADERO            : 
VOID                 : 
WHILE                : 51
YIELD                : 
error                : 

Nonterminals, with rules where they appear

asignacion           : 8
break                : 
cases                : 4 47 48 52
condicion            : 13
continue             : 
declaracion_estructura : 12
declarar_cola        : 
declarar_conjunto    : 
declarar_diccionario_valores : 
declarar_grafo       : 
declarar_mapa        : 
declarar_pila        : 
do_while             : 
empty                : 
expresion            : 3 4 5 6 18 19 34 35 36 39 40 47 48 51 52 56 58
expresion_aritmetica : 11 21 25
expresiones          : 16 19 59
factor               : 23 24
for_each             : 
funcion_con_retorno  : 
funcion_lambda       : 
funcion_multiples_retornos : 
funcion_parametros_opcionales : 
funcion_recursiva    : 
funcion_sobrecarga   : 
impresion            : 9
lista_elementos      : 37 40
llamada_funcion      : 57
operador             : 21 23
parametros           : 2 7 54 56 57 58 59 60 0
pares                : 6 46
programa             : 3 4 14 34 35 35 47 50 51 52 54 55 60 61
solicitud_datos      : 10
statement            : 14 15
switch_case          : 
switch_case_default  : 
term                 : 21 22 23

Parsing method: LALR

state 0

    (0) S' -> . parametros
    (1) parametros -> . VARIABLE
    (2) parametros -> . VARIABLE COMA parametros

    VARIABLE        shift and go to state 2

    parametros                     shift and go to state 1

state 1

    (0) S' -> parametros .



state 2

    (1) parametros -> VARIABLE .
    (2) parametros -> VARIABLE . COMA parametros

    $end            reduce using rule 1 (parametros -> VARIABLE .)
    COMA            shift and go to state 3


state 3

    (2) parametros -> VARIABLE COMA . parametros
    (1) parametros -> . VARIABLE
    (2) parametros -> . VARIABLE COMA parametros

    VARIABLE        shift and go to state 2

    parametros                     shift and go to state 4

state 4

    (2) parametros -> VARIABLE COMA parametros .

    $end            reduce using rule 2 (parametros -> VARIABLE COMA parametros .)

